version: '3.7' # The version of the Docker Compose file

# Services

services:

  # App Server

  app-server:
    container_name: app-server # The Node.js server container name
    restart: unless-stopped # Restart the container if it stops
    build:
      context: ../ # The build context                        
      dockerfile: docker/node/Dockerfile # The Node.js server Dockerfile     
    working_dir: /usr/src/app # The working directory             
    volumes:
      - /usr/src/app/ # Make the app accessible                     
    networks:
      - app-network # For future use
      - nginx-network # For future use

  # App Server             


  # PHP Server, MariaDB, PHPMyAdmin

  php-server:
    build: ./php # The PHP server build context
    container_name: php-server # The PHP server container name
    restart: unless-stopped # Restart the container if it stops
    volumes:
      - ./php/applications/:/var/www/html # Make the PHP application accessible
      - ./php/entrypoints/php.ini:/usr/local/etc/php/php.ini # The PHP configuration file
    networks:
      - php-server-network # Use the PHP server network to communicate with the MariaDB container
      - nginx-network # Use the NGINX network to communicate with the App Server and PHPMyAdmin
    depends_on:
      - mariadb-php # Wait for the MariaDB container to start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"] # Check if the PHP server is running
      interval: 30s # Check every 30 seconds
      retries: 3 # Retry 3 times
      start_period: 10s # Start after 10 seconds
      timeout: 10s # Check if the PHP server is running

  mariadb-php:
    image: mariadb:11.6.2 # The official MariaDB image
    container_name: mariadb-php # The MariaDB container name
    restart: unless-stopped # Restart the container if it stops
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword # Default root password
      MYSQL_DATABASE: test_db # Create a database
      MYSQL_USER: test_user # Create a user
      MYSQL_PASSWORD: test_password # Set the user password
    volumes:
      - php_db_data:/var/lib/mysql # Store data persistently
    networks:
      - php-server-network # Use the PHP server network to communicate with the PHP server
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=localhost", "--password=test_password"] # Check if the MariaDB server is running
      interval: 30s # Check every 30 seconds
      retries: 5 # Retry 5 times
      start_period: 10s # Start after 10 seconds
      timeout: 10s # Timeout after 10 seconds
  
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest # The official PHPMyAdmin image
    container_name: phpmyadmin # The PHPMyAdmin container name
    restart: always # Restart the container if it stops
    environment:
      PMA_HOST: mariadb-php # Hostname of the MariaDB container             
      MYSQL_ROOT_PASSWORD: rootpassword # Default root password
    ports:
      - 8080:80 # The PHPMyAdmin port
    volumes:
      - phpmyadmin_data:/var/www/html # Store data persistently
    depends_on:
      - mariadb-php # Wait for the MariaDB container to start
    networks:
      - php-server-network # Use the PHP server network to communicate with the MariaDB container

  # PHP Server, MariaDB, PHPMyAdmin                                

  
  # Prometheus, Grafana, Node Exporter

  prometheus:
    image: prom/prometheus # The official Prometheus image
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # The Prometheus configuration file
      - prometheus_data:/prometheus # Store data persistently
    networks:
      - metrics-network # Use the metrics network to communicate with the Node Exporter
      - nginx-network # Use the NGINX network to communicate with the App Server and PHP Server

  grafana:
    image: grafana/grafana # The official Grafana image
    environment:
      - GF_SECURITY_ADMIN_USER=admin # The default Grafana admin user
      - GF_SECURITY_ADMIN_PASSWORD=EdqSa6R;&C4fw{Jx=ek<n@ # The default Grafana admin password
    volumes:
      - grafana_data:/var/lib/grafana # Store data persistently
    networks:
      - metrics-network # Use the metrics network to communicate with Prometheus
      - nginx-network # Use the NGINX network to communicate with the App Server and PHP Server

  node-exporter:
    image: prom/node-exporter # The official Node Exporter image
    network_mode: "host" # Use the host network to access host metrics
    pid: "host" # Use the host PID namespace to access host metrics         
    volumes:
      - /proc:/host/proc:ro # Mount the host /proc directory to access host metrics
      - /sys:/host/sys:ro # Mount the host /sys directory to access host metrics
      - /:/rootfs:ro # Mount the root filesystem to access host metrics
    command:
      - '--path.procfs=/host/proc' # To access the host /proc directory
      - '--path.sysfs=/host/sys' # To access the host /sys directory
      - '--path.rootfs=/rootfs' # To access the root filesystem     

  # Prometheus, Grafana, Node Exporter


  # NGINX Server Definition 
  
  nginx:
    image: nginx:latest # The official Nginx image                   
    ports:
      - "6672:6672" # App Server port 
      - "6673:6673" # PHP Server port
      - "6674:6674" # PHPMyAdmin port
      - "6675:6675" # Grafana port         
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # The NGINX configuration file
      # - phpmyadmin
    networks:
      - nginx-network # Use the NGINX network to communicate with the App Server and PHP Server
    extra_hosts:
      - "host.docker.internal:host-gateway" # Add the host.docker.internal alias to the NGINX container

  # NGINX Server Definition  

# Services


# Networks

networks:
  app-network:
    driver: bridge # Use the bridge network driver
  nginx-network:
    driver: bridge # Use the bridge network driver
  metrics-network:
    driver: bridge # Use the bridge network driver
  php-server-network:
    driver: bridge # Use the bridge network driver

# Networks


# Volumes                 

volumes:
  php_db_data: # Define the volume for the MariaDB data
  grafana_data: # Define the volume for the Grafana data
  prometheus_data: # Define the volume for the Prometheus data
  phpmyadmin_data: # Define the volume for the PHPMyAdmin data

# Volumes